// This file has been autogenerated from a class added in the UI designer.

using System;

using Foundation;
using AppKit;
using DungeonTools.Models;
using DungeonTools.Controllers;

namespace DungeonTools
{
    public delegate void AddNewCharacterHandler(PlayerCharacter character);
    public delegate void AddNewMonsterHandler(Monster monster, bool reloadFlag);

	public partial class EncounterController : NSViewController
	{
        private Encounter _encounter = new Encounter();

        public CharacterInitiativeListDataSource characterDataSource = new CharacterInitiativeListDataSource();
        public MonsterInitiativeListDataSource monsterDataSource = new MonsterInitiativeListDataSource();
        public InitiativeOrderListDataSource initiativeOrderDataSource = new InitiativeOrderListDataSource();

		public EncounterController (IntPtr handle) : base (handle)
		{
		}

        public override void ViewDidLoad()
        {
            base.ViewDidLoad();
            PartyTable.DataSource = characterDataSource;
            PartyTable.Delegate = new CharacterEntriesDelegate(characterDataSource);
            MonsterTable.DataSource = monsterDataSource;
            MonsterTable.Delegate = new MonsterEntriesDelegate(monsterDataSource);
            InitiativeTable.DataSource = initiativeOrderDataSource;
            InitiativeTable.Delegate = new CreatureEntriesDelegate(initiativeOrderDataSource);
        }

        public override void PrepareForSegue(NSStoryboardSegue segue, NSObject sender)
        {
            base.PrepareForSegue(segue, sender);
            switch (segue.Identifier)
            {
                case "SegueToAddCharacter":
                    AddCharacterViewController addCharacterViewController = (AddCharacterViewController)segue.DestinationController;
                    // Use a delegate to transfer information between controllers
                    addCharacterViewController.AddNewCharacterHandler = addCharacterToParty;
                    break;
                case "SegueToAddMonster":
                    AddMonsterViewController addMonsterViewController = (AddMonsterViewController)segue.DestinationController;
                    addMonsterViewController.AddNewMonsterHandler = addMonstersToEncounter;
                    break;
                default:
                    break;
            }
        }

        partial void OnRemovePlayerButtonClicked(NSObject sender)
        {
            if (PartyTable.SelectedRow != -1)
            {
                characterDataSource.CharacterEntries.RemoveAt((int)PartyTable.SelectedRow);
                PartyTable.ReloadData();
            }
        }

        partial void OnRemoveMonsterButtonClicked(NSObject sender)
        {
            if (MonsterTable.SelectedRow != -1)
            {
                monsterDataSource.MonsterEntries.RemoveAt((int)MonsterTable.SelectedRow);
                MonsterTable.ReloadData();
            }
        }

        partial void OnStartEncounterButtonClicked(NSObject sender)
        {
            _encounter.Party = characterDataSource.CharacterEntries;
            _encounter.Monsters = monsterDataSource.MonsterEntries;
            if (_encounter.Party.Count > 0 || _encounter.Monsters.Count > 0)
            {
                _encounter.start();
                initiativeOrderDataSource.CreatureEntries = _encounter.InitiativeOrder;
                InitiativeTable.ReloadData();
                StartEncounterButton.Enabled = false;
                EndEncounterButton.Enabled = true;
            }
        }

        partial void OnEndEncounterButtonClicked(NSObject sender)
        {
            _encounter.endEncounter();
            InitiativeTable.ReloadData();
            StartEncounterButton.Enabled = true;
            EndEncounterButton.Enabled = false;
        }

        private void addCharacterToParty(PlayerCharacter character)
        {
            characterDataSource.CharacterEntries.Add(character);
            PartyTable.ReloadData();
        }

        private void addMonstersToEncounter(Monster monster, bool reloadFlag)
        {
            monsterDataSource.MonsterEntries.Add(monster);
            if (reloadFlag)
            {
                MonsterTable.ReloadData();
            }
        }
    }
}
